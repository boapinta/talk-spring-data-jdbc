= Spring Data JDBC
:icons: font
:twitter-tag: @jensschauder
:conference-tag: #SpringOne
:talk-tag: #sdJdbc
:slide-link: http://bit.ly/talk-sd-jdbc
:linkattrs:
:main-incl: {src-incl}src/main/java/de/schauderhaft/talk/
:test-incl: {src-incl}src/test/java/de/schauderhaft/talk/
:res-incl: {src-incl}src/main/resources/

include::footer.ad[]

{nbsp} +
{nbsp} +

[small]#Press S for speaker notes#

== Talk Motto

image::shame.png[canvas,size=contain]

[quote, "Reid Hoffman"]
____
If you are not embarrassed by the first version of your product, you’ve launched too late.
____

=== Spring Data

image::spring-data.png[canvas,size=contain]

[NOTE.speaker]
====
* Consistent Programming Model for data access.

* Inspired by DDD

* Modules for JPA, Mongo, Cassandra, Neo4j ...

* Repository Abstraction
====

=== Let's take a look

a.k.a Demo

=== You need

* `NamedParameterJdbcOperations` Bean
* `@EnableJdbcRepositories`
* extend `JdbcConfiguration` for default stuff
* Aggregate Roots need an `@Id`
* No getters/setter required
* You can "wither" instead

== Why Spring Data Jdbc?

We have already JPA

image::jpa-sdjdbc.png[canvas,size=contain]

=== JPAs complexity

[NOTE.speaker]
====
JPAs enormous power comes with considerable complexity
====

=== Lazy Loading (Exception)

=== Dirty Checking

[NOTE.speaker]
====
What if you change an entity but don't want to save it?
====

=== Session / 1st Level Cache

[NOTE.speaker]
====
You can't for example load the unchanged entity in an event
====

=== Proxies for Entities

=== Map almost anything to anything

== Spring Data JDBCs Design Choices

image::compass.png[canvas,size=contain]

=== No Lazy Loading

=== No Caching

=== No Proxies

=== No deferred flushing

=== Very simple & limited & opinionated ORM

=== Simplicity is King

Complexity is tempting

== Let's see that in action

a.k.a more demo code

=== !

* Clone: set ID to `null` and save again.

* Loading the same entity creates multiple instances.

=== Death is for free

and it costs you your life.


== Non trivial Aggregates

image::aggregate.png[canvas,size=contain]

=== Design Challenge

CRUD Operations for entities with references

aka ORM

[NOTE.speaker]
====
You probably want to save an `Order` with it's `items` in one go.

But maybe not Authors with Books

* We don't want to rebuild Hibernate.

* We want to keep things simple.

* Yet have something useful.

I killed about a month just for this one.

I hated it at first.

But by now I think it's actually quite nice.
====

== => No Many-to-X relations!

image::seagull.png[canvas,size=contain]

[NOTE.speaker]
====
You can't have Many to anything relationships.

One to one and one to many are fine though.

Don't run away, there are reasons for this.
====

=== Aggregate

[quote, "Martin Fowler", https://martinfowler.com/bliki/DDD_Aggregate.html]
____

Aggregate is a pattern in Domain-Driven Design.
A DDD aggregate is a cluster of domain objects that can be treated as a single unit.
____

=== Repositories work on Aggregates

[quote, "Martin Fowler", https://martinfowler.com/bliki/DDD_Aggregate.html]
____
Aggregates are the basic element of transfer of data storage - you request to load or save whole aggregates.
____

[NOTE.speaker]
====
When ever you load or save something, you are dealing with complete aggregates.
====

=== Aggregate Root

[quote, "Martin Fowler", https://martinfowler.com/bliki/DDD_Aggregate.html]
____

An aggregate will have one of its component objects be the aggregate root.
Any references from outside the aggregate should only go to the aggregate root.
The root can thus ensure the integrity of the aggregate as a whole.
____

[NOTE.speaker]
====
If from inside of one aggregate you don't touch or reference the stuff of another aggregate.
If something has references from two aggregates it must be an AggregateRoot itself.
====

=== Many to X relations

If multiple Aggregate roots reference X,

X must be another Aggregate Root.

=> Not part of this Aggregate.

=== What is part of the Aggregate?

Everything referenced.

=== What to do

* Just reference an id.

[NOTE.speaker]
====
In the database you might consider

* no constraints across aggregates.

* deferred constraints.
====

=== Effects

* Makes Aggregates obvious in code

* Easier testing (no huge chains of dependencies)

* Allows to pick a persistence strategy per Aggregate

== Events

image::event.png[canvas,size=contain]

=== Available Events

* `BeforeSaveEvent`
* `AfterSaveEvent`
* `BeforeDeleteEvent`
* `AfterDeleteEvent`
* `AfterLoadEvent` - when an Aggregate got instantiated from the database

[NOTE.speaker]
====
Beware there are events with the same name in Spring Data Rest
====

=== `AggregateChange`

* A model of the changes to be applied to the database
* contains a **mutable** list of `DbAction` s.

=== `DbAction`

Represents a single SQL statement to be executed against the database.

=== Do whatever you want

* Access the repository
* change the entities
* **Change** the `AggregateChange`!

== Auditing

[NOTE.speaker]
====
Not Envers like historization

Just simple setting of created/modified timestamps and users
====

=== Enable Auditing Support

`@EnableJdbcAuditing`

=== Add fields

[source, java, indent=0, tabsize=2]
----
include::{main-incl}Customer.java[tags=fields]
----

=== Register `AuditorAware`

[source, java, indent=0, tabsize=2]
----
include::{main-incl}CustomerConfig.java[tags=auditor]
----

=== `AuditorAware` example

[source, java, indent=0, tabsize=2]
----
include::{main-incl}ModifiableAuditorAware.java[tags=auditor]
----

== MyBatis

image::mybatis.png[canvas,size=contain]

== `@Query`

image::select.png[canvas,size=contain]

=== `@Query`

[source, java, indent=0, tabsize=2]
----
include::{main-incl}CustomerRepository.java[tags=query]
----

=== `@Modifying`

=== RowMapper

== (Maybe) upcoming

image::future.png[canvas,size=contain]

Not promising anything.

=== Better CRUD

upserts?

=== Derived Queries

=== Sorting and Paging

=== Named Queries with MyBatis

=== Named Queries via Properties

=== Spring Boot Support

https://github.com/spring-projects/spring-boot/issues/14489

Is part of the `2.1.x` Milestone

== Is there reactive support?

=== The challenge

=== JDBC is blocking

Could be wrapped in a `ThreadPool` which would be a compromise.

=== JPA won't happen

The whole approach is opposite to reactive.

=== ADBA

**A**synchronous **D**ata**B**ase **A**pi being developed by Oracle

https://events.rainfocus.com/catalog/oracle/oow17/catalogjavaone17?search=CON1491&showEnrolled=false[Java One Slides: [small]#https://events.rainfocus.com/catalog/oracle/oow17/catalogjavaone17?search=CON1491&showEnrolled=false#]

http://mail.openjdk.java.net/mailman/listinfo/jdbc-spec-discuss[Mailing List: [.small]#http://mail.openjdk.java.net/mailman/listinfo/jdbc-spec-discuss#]

http://hg.openjdk.java.net/jdk/sandbox/file/JDK-8188051-branch/src/jdk.incubator.adba/share/classes[Repository: [.small]#http://hg.openjdk.java.net/jdk/sandbox/file/JDK-8188051-branch/src/jdk.incubator.adba/share/classes#]

https://github.com/pull-vert/adba-mirror[Mirror on github: [.small]#https://github.com/pull-vert/adba-mirror#]

[NOTE.speaker]
====

No visible feedback from other database vendors.

Pushed back against reactive at first.
Now it seems they changed their minds.

Everybody is curious, I guess.
====

=== AoJ

**A**DBA **o**ver **J**DBC

An rudimentary implementation of ADBA based on JDBC.

https://github.com/oracle/oracle-db-examples/tree/master/java/AoJ[Repository [.small]#https://github.com/oracle/oracle-db-examples/tree/master/java/AoJ#]

=== R2DBC

**R**eactive **R**elational **D**atabase **C**onnectivity

https://github.com/r2dbc[Github Orga: [.small]#https://github.com/r2dbc#]

=== R2DBC Contributers

 * Pivotal (Spring, Spring Data, Reactor)
 * jOOQ (Lukas Eder)
 * RxJava (Dávid Karnok)

=== R2DBC Experimental Implementations

https://github.com/r2dbc/r2dbc-postgresql[Postgres [.small]#https://github.com/r2dbc/r2dbc-postgresql#]

https://github.com/r2dbc/r2dbc-over-adba[R2DBC over ADBA [.small]#https://github.com/r2dbc/r2dbc-over-adba#]

=== R2DBC @ Spring Data

Database Client inspired by Webclient.

Reactive Relational Repositories.

https://github.com/spring-projects/spring-data-jdbc/tree/r2dbc[Github: [.small]#https://github.com/spring-projects/spring-data-jdbc/tree/r2dbc#]

=== Reactive Wrap up

Our current bets are or R2DBC.

We'll keep an eye on ADBA and will support it.

There'll be probably some kind of support in on of the next releases.

== References

* Github: https://github.com/spring-projects/spring-data-jdbc

* Project: https://projects.spring.io/spring-data-jdbc/

* Examples: https://github.com/spring-projects/spring-data-examples/tree/master/jdbc

* Slides on Github: https://github.com/schauder/talk-spring-data-jdbc

include::self.ad[leveloffset=1]
